v8::HandleScope handle_scope;
v8::Context::Scope scope(my_context);

v8::Handle<v8::Value> execstr(v8::Handle<v8::String> str) {
	v8::HandleScope handle_scope;
	v8::Context::Scope scope(my_context);

	v8::TryCatch try_catch;
	v8::Handle<v8::Script> script = v8::Script::Compile(str, v8::String::New("inline::code"));
	return script->Run();
}


// .....


v8::Handle<v8::Function> func1 = v8::Handle<v8::Function>::Cast(execstr(v8::String::New("func1")));
v8::Handle<v8::Function> func2 = v8::Handle<v8::Function>::Cast(execstr(v8::String::New("func2")));

v8::Handle<v8::Value> func1_args[2] = {v8::String::New("foo"), v8::String::New("bar")};
v8::Handle<v8::Value> val1 = func1->Call(my_context->Global(), 2, func1_args);
// usually this fails, or it segfaults at this point
// but if i were to comment out the line above that assigns `func2`, then it works fine. :(

v8::Handle<v8::Value> func2_args[1] = {v8::String::New("baz")};
v8::Handle<v8::Value> val2 = func2->Call(my_context->Global(), 1, func2_args);