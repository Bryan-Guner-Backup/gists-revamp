function foo() {
   var p = promise; // `promise` being new auto keyword kinda like `arguments`

   setTimeout(function(){
      if (blah == 5) {
         p.fulfill();
      }
      else {
         p.fail();
      }
   },1000);
   p.defer(); // flag this function as needing to defer its promise
}

function yay() {
   console.log("Yay, blah is: "+blah);
}

function bummer() {
   console.log("Bummer, blah is: "+blah);
}

var blah = 5;

foo() @ yay() : bummer(); // Yay, blah is: 5

foo() @ yay() : bummer(); blah = 10; // Bummer, blah is: 10

(blah = 5) @ foo() @ yay() : bummer(); // Yay, blah is: 5

blah = 5;
foo() @ (blah = 10) @ yay() : bummer(); // Yay, blah is: 10

blah = 5;
foo() @ (blah = 10) @ foo() @ yay() : bummer(); // Bummer, blah is: 10

blah = 5;
foo() @ ((blah = 10) @ yay() : bummer()) : bummer(); // Yay, blah is: 10

blah = 10;
foo() @ ((blah = 5) @ yay() : bummer()) : bummer(); // Bummer, blah is: 10

blah = 5;
foo() @ yay() : ((blah = 5) @ foo() @ yay() : bummer()) // Yay, blah is: 5

